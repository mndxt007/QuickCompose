@using Microsoft.Office.Interop.Outlook;
@inject OfficeService outlookCOM

@exceptions
<div class="container">
    @if(items !=null)
    {
        @foreach (var item in items)
        {

            <div class="row">
                @item.Subject
            </div>
        }
    }
    
</div>


@code {
    string exceptions;
    IEnumerable<MailItem> items;
    //Microsoft.Office.Interop.Outlook.Application outlookApp;

    protected override void OnInitialized()
    {
        try
        {
            // Microsoft.Office.Interop.Outlook.Application outlookApp = new Microsoft.Office.Interop.Outlook.Application();
            //outlookApp = outlookCOM.outlookApp;
            NameSpace outlookNamespace = outlookCOM.outlookApp.GetNamespace("MAPI");
            MAPIFolder inboxFolder = outlookNamespace.GetDefaultFolder(OlDefaultFolders.olFolderInbox);
            // Refer - https://learn.microsoft.com/en-us/dotnet/api/microsoft.office.interop.outlook._items.restrict?view=outlook-pia#microsoft-office-interop-outlook-items-restrict(system-string)
            var filter = $"[ReceivedTime] >= '{DateTime.Today.AddDays(-10).ToString("dd/MM/yyyy")}'";
            //took a lot of time so its better do it in COM
            // items = inboxFolder.Items.Restrict(filter)
            //         .OfType<MailItem>()
            //         .OrderByDescending(mailItem => mailItem.ReceivedTime)
            //         .Take(10);
            Items mailItems = inboxFolder.Items;
            // Refer - https://learn.microsoft.com/en-us/dotnet/api/microsoft.office.interop.outlook._items.sort?view=outlook-pia
            mailItems.Sort("[ReceivedTime]", true); // Sort by ReceivedTime in descending order
            items = mailItems.Restrict(filter).OfType<MailItem>().Take(10);
        }
        catch (System.Exception e)
        {
            exceptions = e.ToString();
        }
    }


}