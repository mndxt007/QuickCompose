@inject NavigationManager NavigationManager
@* @using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components; *@
@* @using QuickCompose.Model; *@
@* @using OutlookAddInMAUI8.Services; *@
@* @using System.Net.Http.Json;
@using System.Text.Json; *@


@inject OutlookCOM outlookCOM


<div>
    @exceptions
    @* @subject *@
    <OutlookMAUI8.Components.Library.EmailCard PlanModel="compose" />
</div>


@code {
    string exceptions;
    string subject;
    Application outlookApp;
    Selection selection;
    Explorer explorer;
    MailItem mailItem;
    OutlookCOM _outlookCOM;
    bool callBackregistered;
    PlanModel compose = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            outlookApp = outlookCOM.outlookApp;
            explorer = outlookApp.ActiveExplorer();
            explorer.SelectionChange += Explorer_SelectionChange;
            await CurrentSelection();
            // Microsoft.Office.Interop.Outlook.Application outlookApp = new Microsoft.Office.Interop.Outlook.Application();
           

        }
        catch (System.Exception e)
        {
            exceptions = e.ToString();
        }
    }

    private async Task CurrentSelection()
    {
        selection = explorer.Selection;
        if (selection.Count > 0)
        {
            mailItem = selection[1] as MailItem;

        }
        if (mailItem != null)
        {
            // print the subject of the email
            subject = mailItem.Subject;
            compose.Message = mailItem;

        }


    }

    private async void Explorer_SelectionChange()
    {
        await InvokeAsync(() =>
    {
        try
        {
            CurrentSelection();
            // Microsoft.Office.Interop.Outlook.Application outlookApp = new Microsoft.Office.Interop.Outlook.Application();
            StateHasChanged();

        }
        catch (System.Exception e)
        {
            exceptions = e.ToString();
        }
        
    });
        //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }



    // private async Task GenerateEmailPlan()
    // {
    //     try
    //     {
    //         Status = "Reading Email";
    //         _loadingEmailPlan = true;
    //         StateHasChanged();

    //         if (EmailContext is null)
    //         {
    //             return;
    //         }

    //         EmailContext.EmailBody = GetProcessedEmailBody(EmailContext.EmailBody!);

    //         if (!string.IsNullOrEmpty(EmailContext.EmailBody))
    //         {
    //             Status = "Generating Plan";
    //             StateHasChanged();

    //             var prompt = ConstructPlanPrompt(EmailContext);
    //             if (!string.IsNullOrEmpty(prompt))
    //             {
    //                 var jsonResponse = await OpenAIService.GetResponse(prompt);
    //                 Console.WriteLine(jsonResponse);
    //                 Plan = JsonSerializer.Deserialize<PlanModel>(jsonResponse);
    //             }
    //             else
    //             {
    //                 await Console.Out.WriteLineAsync("Prompt is empty or invalid.");
    //             }
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Status = ex.Message;
    //         Console.WriteLine($"Error: {ex}");
    //         _loadingEmailPlan = false;
    //     }

    //     _loadingEmailPlan = false;
    //     StateHasChanged();
    // }
    // private async Task GenerateCustomEmailResponse()
    // {
    //     try
    //     {
    //         _loadingCustomResponse = true;
    //         StateHasChanged();

    //         var userName = EmailContext?.UserName;

    //         if (!string.IsNullOrEmpty(EmailContext?.EmailBody))
    //         {
    //             Status = "Generating Custom Response";

    //             var prompt = ConstructCustomEmailResponsePrompt(EmailContext);
    //             if (!string.IsNullOrEmpty(prompt))
    //             {
    //                 var openAIService = ServiceProvider.GetRequiredService<OpenAIService>();
    //                 GeneratedEmailResponse = await openAIService.GetResponse(prompt);
    //                 Console.WriteLine(GeneratedEmailResponse);
    //             }
    //             else
    //             {
    //                 Console.WriteLine("Prompt is empty or invalid.");
    //             }
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Status = ex.Message;
    //         Console.WriteLine($"Error: {ex.Message}");
    //     }

    //     _loadingCustomResponse = false;
    // }
    // private string GetProcessedEmailBody(string emailBody)
    // {
    //     var rawEmail = Configuration.GetValue<bool>("Anonymizer:EnableAnonymizer") ? AnonymizeInput(emailBody!).Result : emailBody;
    //     return rawEmail?.Length > 8000 ? rawEmail[..8000] : rawEmail!;
    // }
    // private string ConstructPlanPrompt(EmailContext context)
    // {
    //     var Categories = OpenAIService.Categories;
    //     if (context != null && !string.IsNullOrEmpty(_planPrompt))
    //     {
    //         bool isSentItem = string.Equals(context.SenderEmail ?? "", context.UserEmail ?? "", StringComparison.OrdinalIgnoreCase);
    //         return string.Format(_planPrompt, context.UserName, isSentItem ? "Myself" : context.SenderEmail, isSentItem ? "Sent Item" : "Inbox", context.EmailBody, Categories.Category1, Categories.Category2, Categories.Category3, Categories.Category4);
    //     }

    //     return string.Empty;
    // }
    // private string ConstructCustomEmailResponsePrompt(EmailContext context)
    // {
    //     var Categories = OpenAIService.Categories;
    //     if (context != null && !string.IsNullOrEmpty(_customEmailResponsePrompt))
    //     {
    //         bool isSentItem = string.Equals(context.SenderEmail ?? "", context.UserEmail ?? "", StringComparison.OrdinalIgnoreCase);
    //         return string.Format(_customEmailResponsePrompt, context.UserName, isSentItem ? "Myself" : context.SenderEmail, isSentItem ? "Sent Item" : "Inbox", CustomInstruction, context.EmailBody, Categories.Category1, Categories.Category2, Categories.Category3, Categories.Category4);
    //     }

    //     return string.Empty;
    // }
    // private async Task<EmailContext> GetEmailContext(bool includeFullConversation = false)
    // {
    //     var response = await OfficeService.GetEmailDataAsync(includeFullConversation);
    //     return JsonSerializer.Deserialize<EmailContext>(response)!;
    // }
    // public async Task<string?> AnonymizeInput(string emailBody)
    // {
    //     var client = ClientFactory.CreateClient("Anonymizer");
    //     var response = await client.PostAsJsonAsync("Anonymizer", emailBody);

    //     var anonymizerResult = await response.Content.ReadAsStringAsync();
    //     return anonymizerResult;
    // }
    // private async Task ReplyAll(string response)
    // {
    //     await OfficeService.ReplyAllAsync(response);
    // }
}
